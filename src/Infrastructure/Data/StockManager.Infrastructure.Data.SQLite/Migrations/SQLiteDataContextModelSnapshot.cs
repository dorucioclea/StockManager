// ReSharper disable All
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;

namespace StockManager.Infrastructure.Data.SQLite.Migrations
{
    [DbContext(typeof(SQLiteDataContext))]
    partial class SQLiteDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065");

            modelBuilder.Entity("StockManager.Domain.Core.Entities.Logging.LogAction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ExtendedOptionsEncoded")
                        .HasColumnType("text");

                    b.Property<int>("LogActionType");

                    b.Property<DateTime>("Moment");

                    b.HasKey("Id");

                    b.HasIndex("Moment");

                    b.HasIndex("Moment", "LogActionType")
                        .HasName("UniqueLogAction");

                    b.ToTable("LogActions");
                });

            modelBuilder.Entity("StockManager.Domain.Core.Entities.Market.Candle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("ClosePrice");

                    b.Property<string>("CurrencyPair")
                        .IsRequired();

                    b.Property<decimal>("MaxPrice");

                    b.Property<decimal>("MinPrice");

                    b.Property<DateTime>("Moment");

                    b.Property<decimal>("OpenPrice");

                    b.Property<int>("Period");

                    b.Property<decimal>("VolumeInBaseCurrency");

                    b.Property<decimal>("VolumeInQuoteCurrency");

                    b.HasKey("Id");

                    b.HasIndex("Moment");

                    b.HasIndex("CurrencyPair", "Period", "Moment")
                        .IsUnique()
                        .HasName("UniqueCandle");

                    b.ToTable("Candles");
                });

            modelBuilder.Entity("StockManager.Domain.Core.Entities.Trading.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AnalysisInfoEncoded")
                        .HasColumnType("text");

                    b.Property<Guid>("ClientId");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CurrencyPair")
                        .IsRequired();

                    b.Property<long>("ExtId");

                    b.Property<int>("OrderSide");

                    b.Property<int>("OrderStateType");

                    b.Property<int>("OrderType");

                    b.Property<Guid>("ParentClientId");

                    b.Property<decimal>("Price");

                    b.Property<decimal>("Quantity");

                    b.Property<int>("Role");

                    b.Property<decimal?>("StopPrice");

                    b.Property<int>("TimeInForce");

                    b.Property<DateTime>("Updated");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique()
                        .HasName("ByOrderClientId");

                    b.HasIndex("CurrencyPair")
                        .HasName("OrderCurrencyPair");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("StockManager.Domain.Core.Entities.Trading.OrderHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AnalysisInfoEncoded")
                        .HasColumnType("text");

                    b.Property<Guid>("ClientId");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CurrencyPair")
                        .IsRequired();

                    b.Property<long>("ExtId");

                    b.Property<int>("OrderSide");

                    b.Property<int>("OrderStateType");

                    b.Property<int>("OrderType");

                    b.Property<Guid>("ParentClientId");

                    b.Property<decimal>("Price");

                    b.Property<decimal>("Quantity");

                    b.Property<int>("Role");

                    b.Property<decimal?>("StopPrice");

                    b.Property<int>("TimeInForce");

                    b.Property<DateTime>("Updated");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique()
                        .HasName("ByHistoryClientId");

                    b.HasIndex("CurrencyPair")
                        .HasName("HistoryCurrencyPair");

                    b.ToTable("OrderHistory");
                });

            modelBuilder.Entity("StockManager.Domain.Core.Entities.Trading.TradingBallance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Available");

                    b.Property<string>("CurrencyId")
                        .IsRequired();

                    b.Property<decimal>("Reserved");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId")
                        .IsUnique()
                        .HasName("TradingBallanceCurrency");

                    b.ToTable("TradingBallance");

                    b.HasData(
                        new { Id = 1L, Available = 100m, CurrencyId = "USD", Reserved = 0m },
                        new { Id = 2L, Available = 0m, CurrencyId = "LTC", Reserved = 0m }
                    );
                });
#pragma warning restore 612, 618
        }
    }
}
